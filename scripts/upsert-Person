// Constants and Initial Setup
const table = base.getTable("People");
const inputConfig = input.config();
const fields = [
  "first name", 
  "last name", 
  "primary email", 
  "secondary email",
  "primary phone",
  "secondary phone",
  "searchable_id"
];

// Extract first item of each array from input configuration
const { firstName, middleName, lastName, primaryEmail, secondaryEmail, primaryPhone, secondaryPhone } = {
  firstName: inputConfig.firstName[0],
  middleName: inputConfig.middleName[0],
  lastName: inputConfig.lastName[0],
  primaryEmail: inputConfig.primaryEmail[0],
  secondaryEmail: inputConfig.secondaryEmail[0],
  primaryPhone: inputConfig.primaryPhone[0],
  secondaryPhone: inputConfig.secondaryPhone[0]
};

// Function to create a searchable ID, refactored to prevent "--"
const createSearchableId = (firstName, middleName, lastName, primaryEmail) => {
  const parts = [
      lastName.replace(/\s+/g, "-"),
      firstName.replace(/\s+/g, "-"),
      middleName ? middleName[0] : '',  // Only use the first character of middleName if not null or empty
      primaryEmail
  ].filter(Boolean).join("-").toLowerCase();  // Filter out empty parts to prevent "--" and join them
  console.log({searchableId: parts});
  return parts;
};

const searchableId = createSearchableId(firstName, middleName, lastName, primaryEmail);
const hasData = firstName && lastName && primaryEmail;

async function processRecords() {
  try {
    const records = await table.selectRecordsAsync({fields});
    const foundRecord = records.records.find(
      record => record.getCellValueAsString("searchable_id") === searchableId
    );

    if (!hasData) {
      console.error("Missing person information");
      return {
        searchableId: searchableId,
        Record_ID: "",
        Action_Status: "No Data"
      };
    }

    if (foundRecord) {
      let updates = {};
      const updateFields = {
        "primary phone": primaryPhone,
        "secondary phone": secondaryPhone,
        "secondary email": secondaryEmail
      };

      // Determine necessary updates based on new data provided
      for (let [field, value] of Object.entries(updateFields)) {
        if (value && value !== foundRecord.getCellValue(field)) {
          updates[field] = value;
        }
      }

      if (Object.keys(updates).length > 0) {
        await table.updateRecordAsync(foundRecord.id, updates);
        console.log('Updated Record', {Record_ID: foundRecord.id, Updates: updates});
        return { searchableId, Record_ID: foundRecord.id, Action_Status: "Updated" };
      } else {
        console.log('Found Record', {Record_ID: foundRecord.id});
        return { searchableId, Record_ID: foundRecord.id, Action_Status: "Found" };
      }
    } else if (hasData) {
      const newRecordId = await table.createRecordAsync({
        "first name": firstName,
        "last name": lastName,
        "primary email": primaryEmail
      });
      console.log('New Record Created', {newRecordId});
      return { searchableId, Record_ID: newRecordId, Action_Status: "Created" };
    }
  } catch (error) {
    console.error('Error processing records:', error);
    return { searchableId, Record_ID: "", Action_Status: "Error" };
  }
}

// Execute the function and handle outputs
processRecords().then(result => {
  output.set("searchable_id", result.searchableId);
  output.set("Record_ID", result.Record_ID);
  output.set("Action_Status", result.Action_Status);
});