// Constants and Initial Setup
const table = base.getTable("People");
const inputConfig = input.config();


// Extract first item of each array from input configuration

let first_name = inputConfig.first_name[0];
let middle_name = inputConfig.middle_name[0];
let last_name = inputConfig.last_name[0];
let primary_email = inputConfig.primary_email[0];
let secondary_email = inputConfig.secondary_email[0];
let primary_phone = inputConfig.primary_phone[0];
let secondary_phone = inputConfig.secondary_phone[0];
// config searchable id
let searchable_id = inputConfig.searchable_id[0];

const fields = [
  first_name,
  last_name,
  middle_name,
  primary_email,
  secondary_email,
  primary_phone,
  secondary_phone,
  searchable_id,
];

const hasData = first_name && last_name && primary_email;

async function processRecords() {
  try {
    const records = await table.selectRecordsAsync({ ...fields });
    console.log({ records })//** test */

    const foundRecord = records.records.find(
      record => record.getCellValueAsString("searchable_id") === searchable_id
    );

    if (!hasData) {
      console.error("Missing person information");
      return {
        Record_ID: "",
        Action_Status: "No Data"
      };
    }

    if (foundRecord) {
      let updates = {};
      const updateFields = {
        primary_phone,
        secondary_phone,
        secondary_email,
      };

      // Determine necessary updates based on new data provided
      for (let [field,value] of Object.entries(updateFields)) {
        if (value && value !== foundRecord.getCellValue(field)) {
          updates[field] = value;
        }
      }

      if (Object.keys(updates).length > 0) {
        await table.updateRecordAsync(foundRecord.id,updates);
        console.log('Updated Record',{ Record_ID: foundRecord.id,Updates: updates });
        return { searchable_id,Record_ID: foundRecord.id,Action_Status: "Updated" };
      } else {
        console.log('Found Record',{ Record_ID: foundRecord.id });
        return { searchable_id,Record_ID: foundRecord.id,Action_Status: "Found" };
      }
    } else if (hasData) {
      const newRecordId = await table.createRecordAsync({
        first_name,
        last_name,
        primary_email,
        searchable_id
      });
      console.log('New Record Created',{ newRecordId });
      return { searchable_id,Record_ID: newRecordId,Action_Status: "Created" };
    }
  } catch (error) {
    console.error('Error processing records:',error);
    return { searchable_id,Record_ID: "",Action_Status: "Error" };
  }
}

// Execute the function and handle outputs
processRecords().then(result => {
  console.log({ result });

  if (result) {
    // output.set("searchable_id",result.searchable_id);
    output.set("Record_ID",result.Record_ID);
    output.set("Action_Status",result.Action_Status);
  } else {
    throw new Error("No results returned in People script")
  }
});
