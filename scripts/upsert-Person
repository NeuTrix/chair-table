// set the search table name
 // find the table
const searchTable = "People"
let table = base.getTable(searchTable);
// console.log({table})

// initiate the config
let inputConfig = input.config();
let firstName = inputConfig.firstName[0];
let middleName = inputConfig.middleName[0];
let lastName = inputConfig.lastName[0];
let primaryEmail = inputConfig.primaryEmail[0];
let secondaryEmail = inputConfig.secondaryEmail[0];
let primaryPhone = inputConfig.primaryPhone[0];
let secondaryPhone = inputConfig.secondaryPhone[0];

console.log({
  secondaryEmail,
primaryPhone,
secondaryPhone}
)

// inititate other variables
let Record_ID = "";
let Action_Status = "Null";

// ***** Create 'searchable_id *****
// Last-First-(middle first initial)-email, all lowercase
const createSearchableId = (data) => {
  console.log({data})
  let {firstName, middleName, lastName, primaryEmail} = data;
  let nameArr = [];

  nameArr.push(...lastName.split(" "));
  nameArr.push(...firstName.split(" "));
  // Clean up middleName
  data.middleName && nameArr.push(middleName[0]);
  nameArr.push(primaryEmail);

  let searchable = nameArr.join("-").toLowerCase();
  console.log({searchable})
  return searchable
};
// **************************

// get the records
let fields = [
  "first name", 
  "last name", 
  "primary email", 
  "secondary email",
  "primary phone",
  "secondary phone",
  "searchable_id"
]

let people = await table.selectRecordsAsync({fields});

// create searchable string
let data = {firstName, middleName, lastName, primaryEmail};
let searchable_id = createSearchableId(data);

let foundRecord = people.records.find(
  person => person.getCellValueAsString("searchable_id") === searchable_id
)

let hasData = firstName !== "" && lastName !== "" && primaryEmail !== "";

// No Data
if (!hasData) {
  console.error("missing Person Information");
  Action_Status = "No Data";
}

// Upated || Found
// has a phone or secondary email supplied
if (hasData && foundRecord) {

    let currPhonePri = foundRecord.getCellValue("primary phone");
    console.log({currPhonePri})//*** */

    // Updated
    if (primaryPhone && primaryPhone !== currPhonePri) {
      await table.updateRecordAsync(foundRecord.id,{
        "primary phone": primaryPhone,
      })

    Record_ID = foundRecord.id;
    Action_Status = "Updated";
    console.log('Updated Record', {foundRecord})
    } else {
      // Found
      Record_ID = foundRecord.id;
      Action_Status = "Found";

      console.log('Found Record', {foundRecord})
    }


}



// Created
if(hasData && !foundRecord) {
  let newRecordId="";

  try {
    newRecordId = await table.createRecordAsync({
      "first name": firstName,
      "last name": lastName,
      "primary email": primaryEmail
    });
  
  Record_ID = newRecordId;
  Action_Status = "Created";
  console.log('New Record Created', {newRecordId})

  } catch(error) {
    console.error(error);
  }
}

// Set outputs
output.set("searchable_id", searchable_id);
output.set("Record_ID", Record_ID);
output.set("Action_Status", Action_Status);